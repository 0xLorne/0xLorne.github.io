<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-10T21:13:27-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">CC-1337</title><author><name>Lorne</name><email>Pentesting@ciencias.unam.mx</email></author><entry><title type="html">Tryhack3M: Brick Heist</title><link href="http://localhost:4000/posts/bricks-h3ist-writeup/" rel="alternate" type="text/html" title="Tryhack3M: Brick Heist" /><published>2024-04-13T00:00:00-06:00</published><updated>2024-04-13T00:00:00-06:00</updated><id>http://localhost:4000/posts/bricks-h3ist-writeup</id><content type="html" xml:base="http://localhost:4000/posts/bricks-h3ist-writeup/"><![CDATA[<p>This is a Writeup for the room <a href="https://tryhackme.com/r/room/tryhack3mbricksheist">Brick Heist</a>, for the platform <a href="https://tryhackme.com">Tryhackme</a>, I just resolved april 13th (before the deploy)</p>

<p>During the reconnaissance phase, the Nmap scan revealed open ports, although nothing particularly relevant was found. 
<img src="/assets/images/bricks/ports.png" alt="ports" />
Then, a forced-browsing scan, uncover the Wordpress Structure running in the HTTPS service.
<img src="/assets/images/bricks/bricks.png" alt="index" /></p>

<p>Further enumeration focused on the Wordpress version and plugins, with the discovery of the plugin <em>Bricks</em>. A quick research revealed a vulnerability in the Bricks Builder WordPress plugin, documented under CVE-2024-25600. <a href="https://www.securityweek.com/websites-hacked-via-vulnerability-in-bricks-builder-wordpress-plugin/">I stumbled upon an intriguing webpage that not only detailed the flaw within the plugin but also provided information about the CVE itself.</a></p>

<p><img src="/assets/images/bricks/cvedescription.png" alt="cvedescription" /></p>

<p>Then I searched for more info about the CVE, and found a github PoC <a href="https://raw.githubusercontent.com/Chocapikk/CVE-2024-25600/main/exploit.py">exploit</a> that allows unauthenticated RCE (Remote Command Execution) so basically by running the exploit we can now get a shell, and that is what I did</p>

<p><img src="/assets/images/bricks/exploitgh.png" alt="readme" />
<img src="/assets/images/bricks/rce.png" alt="rce" /></p>

<h4 id="what-is-the-content-of-hidden-txt-file">What is the content of hidden .txt file?</h4>

<p>With access gained, I went to the web page and retreive the <code class="language-plaintext highlighter-rouge">hidden .txt file</code>, the content is in the common Tryhackme flag format <em>THM{.}</em></p>

<h4 id="what-is-the-name-of-the-suspicious-process-">What is the name of the suspicious process ?</h4>

<p>Moving beyond access escalation, the focus shifted to identifying suspicious processes. After careful observation, two processes were identified:</p>

<p><img src="/assets/images/bricks/ps1.png" alt="processes" /></p>

<h4 id="what-is-the-service-related-to-the-process">What is the service related to the process?</h4>

<p>To determine the service associated with the identified processes, the following command was executed:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl status --all | grep -B 5 &lt;PID&gt;
</code></pre></div></div>

<p>and, if we’re seeing the output with attention, the service is:</p>

<p><img src="/assets/images/bricks/ps2.png" alt="service" />
The output revealed a service related to cryptocurrency mining.</p>

<p>There is a hint on it, so its easier to find it (?)</p>

<p><img src="/assets/images/bricks/service.png" alt="servicehint" /></p>

<h4 id="what-is-the-config-file-for-the-miner">What is the config file for the miner?</h4>

<p>Upon navigating to the process directory, I examined each file, and among them, one file stood out as particularly intriguing:</p>

<p><img src="/assets/images/bricks/miner.png" alt="miner" /></p>

<p>This file contained a wealth of crucial information. Based on its contents, it became evident that this file served as the configuration file for the mining operation. With ID and the Cryptocurrency that is using: Bitcoin</p>

<h4 id="what-wallet-address-is-mining-to">What wallet address is mining to?</h4>

<p>Within the configuration file, an ID was found, which was then processed using CyberChef to reveal a SegWit Bitcoin Wallet Address. 
<img src="/assets/images/bricks/cyberchef.png" alt="cyberchef" /></p>

<p>By splitting it in half the output and selecting one part, the wallet address was successfully extracted.</p>

<h4 id="the-wallet-address-is-relatet-to-transactions-to-which-threat-groups">The wallet address is relatet to transactions to which threat groups?</h4>

<p>A search for transactions associated with the wallet address led to the identification of threat groups linked to a non-SegWit Bitcoin address. 
<img src="/assets/images/bricks/blockchain.png" alt="blockchain" />
<img src="/assets/images/bricks/bchain2.png" alt="b2" />
<br />
<img src="/assets/images/bricks/wallet.png" alt="wallet" /></p>

<p>Further research revealed the specific threat group mentioned in the question.</p>

<p><img src="/assets/images/bricks/group.png" alt="group" /></p>]]></content><author><name>Lorne</name><email>Pentesting@ciencias.unam.mx</email></author><category term="writeup" /><category term="blockchain" /><category term="Wordpress" /><category term="Miners" /><category term="Threat hunting" /><summary type="html"><![CDATA[This is a Writeup for the room Brick Heist, for the platform Tryhackme, I just resolved april 13th (before the deploy)]]></summary></entry><entry><title type="html">Conociendo a: John The Ripper</title><link href="http://localhost:4000/posts/john-guide/" rel="alternate" type="text/html" title="Conociendo a: John The Ripper" /><published>2024-03-11T00:00:00-06:00</published><updated>2024-03-11T00:00:00-06:00</updated><id>http://localhost:4000/posts/john-guide</id><content type="html" xml:base="http://localhost:4000/posts/john-guide/"><![CDATA[<h1 id="quién-es-john-the-ripper">¿Quién es John The Ripper?</h1>
<p>John The Ripper o <code class="language-plaintext highlighter-rouge">john</code>, es una herramienta versátil y adaptable de cracking de hashes, en otras palabras, es una herramienta de ciberseguridad que podremos usar para descifrar contraseñas y otro tipo de contenido en un hash.</p>

<h1 id="qué-es-un-hash">¿Qué es un hash?</h1>

<p>Un hash o función hash es un algoritmo que transforma el contenido de una cadena de caracteres en una nueva con una longitud establecida, sin importar el tamaño de la entrada, sus aplicaciones van desde la <em>integridad de los datos</em> hasta la implementación en <em>protección de contraseñas</em>, en otras palabras, facilitan manipular información confidencial de manera segura, existen diferentes tipos de algoritmos, así como algoritmos establecidos como estándares para ciertos procesos, como <code class="language-plaintext highlighter-rouge">NTLM</code> para las contraseñas de <strong>Windows</strong> o <code class="language-plaintext highlighter-rouge">SHA512</code> para lo mismo en la mayoría de sistemas <strong>Linux</strong>. Si bien estos son muy importantes y populares, debemos entender que existen muchos tipos más que igualmente son aplicados en la vida cotidiana. Para investigar más sobre el tema, a continuación una <a href="https://hashcat.net/wiki/doku.php?id=example_hashes.">lista con la mayoría de tipos de hash</a> Se recomienda investigar más a detalle sobre el tema, ya que es muy amplio y va más allá del alcance de este artículo.</p>

<p>Ejemplo de un hash con “Hola mundo!”</p>

<ul>
  <li>6FAF6B0C72D56EAAA5EBE6722F37720F</li>
  <li>4c17251f721927663d722e6c02dee3882b0b92bee52da6aa7f02217cb3e5c1874a7d137960c0bb8eeb057d0987e44e78bcd49c15e8d904eb1485d37ec41b224c</li>
</ul>

<h4 id="qué-es-un-diccionario">¿Qué es un diccionario?</h4>

<p>Un archivo con una lista de cadenas que mayormente contiene contraseñas potenciales, normalmente incluyen contraseñas populares, o en ataques dirigidos, palabras y términos específicos correspondientes a las características del objetivo.</p>

<h4 id="qué-es-fuerza-bruta">¿Qué es Fuerza bruta?</h4>

<p>La fuerza bruta es un método de ataque que consiste en probar todas las posibles combinaciones de caracteres para descifrar contraseñas o vulnerar sistemas, popularmente se le conoce como el método más efectivo, ya que, mientras se tengan recursos y paciencia, se llegará al objetivo.</p>

<h1 id="instalando-y-configurando-john">Instalando y configurando John</h1>

<p>Al ser una herramienta tan popular, está disponible para una gran cantidad de sistemas operativos y Distribuciones Linux, por lo que en este caso supondremos tener un sistema basado en <a href="https://www.debian.org/">Debian</a></p>

<p>Instalación via apt:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install john
</code></pre></div></div>
<p>Instalación via git:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/openwall/john -b bleeding-jumbo john
cd john/src/
./configure
make -s clean &amp;&amp; make -sj4
</code></pre></div></div>
<p>El comando anterior especifica la rama <strong>bleeding-jumbo</strong>, que es más popular por sus características extra.
finalmente para probar el binario, podemos usar <code class="language-plaintext highlighter-rouge">./john --test</code></p>

<h1 id="identificando-el-tipo-de-hash">Identificando el tipo de hash</h1>

<p>Para poder realizar un ataque sobre un hash, debemos saber de qué tipo es, esto se logra con herramientas como <code class="language-plaintext highlighter-rouge">hashid</code> que son realmente sencillas de utilizar, simplemente introducimos el hash en cuestión y nos debería devolver el tipo, justo así:</p>

<p><img src="/assets/images/john/hashid.png" alt="hashid" /></p>

<p>Es recomendable contar con varias herramientas de análisis de hash, para tener mayor certeza del tipo, ya que hay bastantes que son parecidos y crackear con un tipo de hash equivocado sólo resultará en una pérdida de tiempo.</p>

<h1 id="primeros-pasos-con-john">Primeros pasos con John</h1>

<p>Afortunadamente la sintaxis de esta herramienta es muy sencilla y nos permitirá entender muy rápido qué es lo que hacemos, primero que nada, debemos pasar como mínimo 1 argumento, que es el archivo con el hash en cuestión que trataremos de romper, algo así:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>john hash.txt
</code></pre></div></div>

<p>Si bien haciendo esto, podemos conseguir descifrar el hash, no es lo más recomendable, ya que hacemos que john descifre el tipo de hash (mediante técnicas basadas en la estructura y longitud del hash) y en la mayoría de los casos puede no hacerlo de manera eficiente, segundo, es una buena práctica especificar el diccionario que utilizaremos, en este caso, nuestro confiable amigo <code class="language-plaintext highlighter-rouge">rockyou.txt</code> para tener algo como lo siguiente:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>john --format=nt --wordlist=/usr/share/wordlists/rockyou.txt hash.txt
</code></pre></div></div>
<p>En el comando anterior especificamos el tipo de hash con la flag <code class="language-plaintext highlighter-rouge">--format</code> y la ubicación de nuestro diccionario, con <code class="language-plaintext highlighter-rouge">--wordlist</code></p>

<p><strong>Nota</strong>: para conocer la sintaxis de cada tipo de hash en la flag –format, se recomienta usar el comando john –list=formats</p>

<h1 id="single-crack">Single Crack</h1>

<p>John nos permite realizar ciertos tipos más específicos de ataques, que nos permiten variar la sintaxis de nuestras posibles contraseñas, normalmente este modo se utiliza cuando podemos pensar que la complejidad de la contraseña es relativamente baja, es decir, no muy complicada, para ello se requiere que el hash tenga el formato <code class="language-plaintext highlighter-rouge">usuario:hash</code> y para este formato no necesitamos un diccionario, ya que este será generado por john</p>

<p>Un ejemplo, supongamos que tenemos un usuario llamado <code class="language-plaintext highlighter-rouge">lorne</code> y obtuvimos un hash, digamos <code class="language-plaintext highlighter-rouge">e79a07a6929602a2b91665bce524dc30</code>, ¿Qué sigue?</p>

<p>bien, debemos primero poner el hash y el usuario en el formato, de la siguiente manera:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">lorne:e79a07a6929602a2b91665bce524dc30</code></li>
</ul>

<p>Una vez creado el formato y puesto en un archivo, nos queda indicarle a john qué tipo de ataque hará:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>john --single --format=raw-md5 hash.txt
</code></pre></div></div>

<p><img src="/assets/images/john/single.png" alt="John Single mode" /></p>

<p>Para este tipo de ataque se utilizan las siguientes transformaciónes de “manglado”:</p>

<p>1.<strong>Mayúsculas y minúsculas</strong>: Convertir todas las letras a mayúsculas o minúsculas, o alternarlas.</p>

<p>2.<strong>Reemplazo de caracteres</strong>: Cambiar ciertas letras por números o símbolos que se asemejen visualmente (por ejemplo, “a” por “@”, “o” por “0”, “l” por “1”, etc.).</p>

<p>3.<strong>Añadir prefijos o sufijos</strong>: Agregar números, símbolos o palabras comunes antes o después de la palabra base.</p>

<p>4.<strong>Permutaciones</strong>: Reordenar las letras de la palabra base.</p>

<p>5.<strong>Eliminación o duplicación de caracteres</strong>: Eliminar o duplicar ciertos caracteres dentro de la palabra base.</p>

<h1 id="reglas-personalizadas">Reglas personalizadas</h1>

<p>Ya sabemos como crackear hashes por medio de diccionarios genéricos y manglado simple, pero esto aún no es suficiente en la mayoría de los casos para obtener contraseñas que siguen un patrón o ciertos requisitos. Actualmente es más común que los servicios y organizaciones pidan que las contraseñas tengan una complejidad.</p>

<p>Las reglas de John funcionan de manera analógica a las <strong>regex</strong> o <strong>expresiones regulares</strong> por lo que un usuario que pueda crearlas y manipularlas, será capaz de realizar sus propios ataques con reglas personalizadas.</p>

<h4 id="paso-1-ubicar-el-archivo-de-configuración">Paso 1: Ubicar el archivo de configuración.</h4>
<p>Las reglas personalizadas se encuentran en el archivo de configuración de john, en linux, sería: <code class="language-plaintext highlighter-rouge">/etc/john/john.conf</code>, por lo que debemos ir ahí. Es una buena práctica implementarlas en la sección de reglas, que se encuentra entre la línea <strong>678</strong> y <strong>1173</strong> (si nuestro archivo es la versión jumbo default)</p>
<h4 id="paso-2-definir-la-regla-personalizada">Paso 2: Definir la regla personalizada.</h4>
<p>Para que el programa entienda que estamos definiendo una regla, justo como una variable en cualquier lenguaje de programación, necesitamos indicarlo con la sintaxis adecuada, siendo la siguiente:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[List.Rules:MiReglaPersonalizada]
cAz"[.#\$!\-][1-9]"
</code></pre></div></div>
<p>donde <code class="language-plaintext highlighter-rouge">List.Rules</code> es el componente encargado de declarar que estamos usando una regla y <code class="language-plaintext highlighter-rouge">MiReglaPersonalizada</code> el nombre de la regla en cuestión.</p>

<p>la explicación de la regla es la siguiente:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">c</code> $\rightarrow$ Capitaliza la palabra (le pone mayúscula a la primer letra)</li>
  <li><code class="language-plaintext highlighter-rouge">Az</code> $\rightarrow$ Agrega a la final de la palabra lo que tenga a continuación</li>
  <li><code class="language-plaintext highlighter-rouge">[.#\$!\-]</code> $\rightarrow$ añade alguno de los siguientes carácteres</li>
  <li><code class="language-plaintext highlighter-rouge">[1-9]</code> $\rightarrow$ añade alguno de los siguientes dígitos</li>
</ul>

<h4 id="paso-3-probar-la-regla">Paso 3: Probar la regla.</h4>

<p>En mi caso usando una palabra que supongamos se obtuvo de las posibles contraseñas, pero sigue las características anteriores.</p>

<p><code class="language-plaintext highlighter-rouge">$2y$10$V/8KEx85Gw2eIIclKlT/beIonHOC4kDiBDBCJg58MIgkMKiJp4g.y</code> (Hash bcrypt) Tenemos este hash, y sabemos que la contraseña es una fruta, porque al objetivo en cuestión le encantan las frutas, así que creamos nuestro diccionario con frutas:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pera
uva
mango
manzana
fresa
piña
kiwi
sandia
platano
</code></pre></div></div>

<p>teniendo, nuestro hash, nuestras posibles contraseñas y nuestra regla personalizada, procedemos:</p>

<p><code class="language-plaintext highlighter-rouge">john --format=bcrypt --rules=MiReglaPersonalizada --wordlist=frutas hash</code></p>

<p><img src="/assets/images/john/cracked.png" alt="Crackeada" /></p>

<p>en resumen obtuvimos una contraseña con características personalizadas y palabras que podían ser la contraseña en cuestión usando reglas custom de john.</p>

<p>Recordando que john no se limita sólo a hashes, sino a archivos zip,rar,passphrase de llaves ssh, etcétera, los límites de uso ya no quedan en la implementación de la herramienta.</p>

<h1 id="cómo-evitar-ser-atacado">¿Cómo evitar ser atacado?</h1>

<ul>
  <li>Evitar contraseñas predecibles</li>
  <li>Usar frases largas como contraseña</li>
  <li>Implementar verificación de 2 factores (2FA)</li>
  <li>Cambiar las contraseñas si se tiene sospechas de haber sido hackeado o en proceso de</li>
  <li>No reciclar contraseñas</li>
  <li>Una alternativa viable también es utilizar gestores de contraseñas</li>
</ul>

<h1 id="conclusión">Conclusión</h1>

<p>En conclusión, John The Ripper es una herramienta poderosa para descifrar hashes y desencriptar contraseñas. Proporciona varios métodos de ataque, incluyendo ataques de diccionario y ataques de fuerza bruta. Al entender los diferentes tipos de hashes y utilizar técnicas apropiadas, John The Ripper puede ser un activo valioso en el campo de la ciberseguridad. Sin embargo, es importante recordar que el uso de contraseñas fuertes y únicas, la implementación de métodos de autenticación avanzados y la actualización regular de contraseñas son prácticas esenciales para protegerse contra los ataques.</p>

<p>Para finalizar, compartiré algunos sitios que pueden interesar al lector si desea aprender más sobre esta herramienta.</p>

<h1 id="fuentes-de-interés">Fuentes de interés</h1>

<ul>
  <li>https://www.openwall.com/john/doc/RULES.shtml</li>
  <li>https://tryhackme.com/room/johntheripper0</li>
</ul>]]></content><author><name>Lorne</name><email>Pentesting@ciencias.unam.mx</email></author><category term="ciberseguridad" /><category term="password cracking" /><category term="hash" /><summary type="html"><![CDATA[¿Quién es John The Ripper? John The Ripper o john, es una herramienta versátil y adaptable de cracking de hashes, en otras palabras, es una herramienta de ciberseguridad que podremos usar para descifrar contraseñas y otro tipo de contenido en un hash.]]></summary></entry><entry><title type="html">Google Dorks: Qué son y para qué</title><link href="http://localhost:4000/posts/google-dorks/" rel="alternate" type="text/html" title="Google Dorks: Qué son y para qué" /><published>2024-02-23T00:00:00-06:00</published><updated>2024-02-23T00:00:00-06:00</updated><id>http://localhost:4000/posts/google-dorks</id><content type="html" xml:base="http://localhost:4000/posts/google-dorks/"><![CDATA[<p>Como usuarios de la tecnología y, aún más importante, como defensores de la seguridad de la información, es fundamental estar familiarizados con las herramientas disponibles para acceder a información oficial y proveniente de fuentes confiables. Además, se recomienda encarecidamente tener conocimientos sobre búsquedas avanzadas para evitar la necesidad de revisar cada título de página en busca de la información deseada después de realizar una búsqueda en un motor de búsqueda.</p>

<h2 id="qué-es-un-motor-de-búsqueda">¿Qué es un motor de búsqueda?</h2>

<p>Se conoce como motor de búsqueda a cualquier software capaz de buscar (así es, el buscador busca) y recopila información y la devuelven según las palabras clave que se le introducen, el ejemplo por excelencia (hmm…) es <strong>Google</strong>, otro muy conocido por los amantes de la privacidad, podría ser <strong>Duck Duck Go</strong>, así mismo <strong>Bing</strong>, <strong>Yahoo!</strong>, entre tantos otros. Básicamente son los buscadores que nos dan las páginas según nuestras solicitudes.</p>

<h2 id="desventajas-de-un-motor-de-búsqueda">Desventajas de un motor de búsqueda</h2>

<p>Podrá parecer que estos mounstros de la información son perfectos porque si buscamos “Facebook” el servicio nos va a mostrar la página de Facebook, pero esto son búsquedas sencillas, ¿Qué pasa si estamos buscando algo específico?</p>

<h4 id="sobrecarga-de-información">Sobrecarga de información</h4>
<p>Aterrizando la idea, Muchas veces queremos encontrar alguna página puntual para realizar algún trámite, o para realizar alguna compra, o para escoger algun servicio, incluso para instalar algún software, ¿Qué pasa cuando nuestro buscador nos inunda con anuncios, con páginas no oficiales e incluso páginas <em>Scam</em>.</p>

<h4 id="información-desactualizada">Información desactualizada</h4>
<p>Muchas veces hay algun evento actual sobre el que queremos consultar, como por ejemplo noticias en algún fenónemo natural (un sismo, un huracán, una tormenta) o algún evento importante de nuestro interés (evento de relevancia , concierto, conferencia, persona de interés), muchas veces el algoritmo falla y nos muestra información obsoleta para el momento, con lo cual tenemos que ser muy cautelosos al revisar las fechas para no caer en desinformación.</p>

<h4 id="falta-de-contexto">Falta de contexto</h4>
<p>Supongamos que queremos instalar la distribución linux Parrot (viva!) y googleamos: <em>parrot</em> naturalmente el motor de búsqueda no sabe que nos referimos a un software, mucho menos que nos referimos a una distribución de linux, por lo tanto nos va a regresar imagenes de parrots (loros) y cosas relacionadas a su cuidado, y muy al final, tal vez veamos la página oficial de parrot, que es la que buscamos.</p>

<p>Ahora somos conscientes que el motor es eso, una herramienta incapaz de entender nuestros pensamientos y su contexto, por eso mismo necesitamos de métodos avanzados de búsqueda, los dorks.</p>

<h2 id="qué-es-un-dork">¿Qué es un Dork?</h2>

<p>Un Dork, es un método avanzado de búsqueda basado en sintaxis, que facilita al navegador y filtra lo que nos sirve, de lo que no, en el contexto de la seguridad, principalmente nos ayuda a aprovechar de una mejor manera la capacidad de los algoritmos de búsqueda de estos motores, e incluso para encontrar información muy específica, que de otras maneras no habríamos sido capaces de encontrar.</p>

<h2 id="para-qué-sirven-los-dorks">¿Para qué sirven los Dorks?</h2>

<p>Los dorks nos ayudan a encontrar URL’s valiosas tanto para reconocimiento profundo, como para descubrir fallas de seguridad, tal cual, (recap de cuando encontré una DB de empleados del IMSSS usando google dorks), así mismo nos podrían ayudar a encontrar contraseñas, archivos, y otro tipo de debilidades en servicios web.</p>

<h2 id="principales-operadores">Principales Operadores</h2>

<p>Hay como 44 tipos diferentes, a continuación los más populares y más usados bajo el contexto de la seguridad:</p>

<table>
  <thead>
    <tr>
      <th>Operador</th>
      <th>Descripción</th>
      <th>Ejemplo</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>”  “</td>
      <td>Encuentra el texto exacto dentro de las comillas</td>
      <td>“ciberseguridad”</td>
    </tr>
    <tr>
      <td>AND / OR</td>
      <td>Muestra resultados que coincidan con alguna condición y/o varias</td>
      <td>ciberseguridad AND hacking</td>
    </tr>
    <tr>
      <td>intitle:</td>
      <td>Encuentra páginas que contienen un término específico en su título.</td>
      <td>intitle:”ciberseguridad”</td>
    </tr>
    <tr>
      <td>inurl:</td>
      <td>Encuentra páginas con una URL que contiene un término específico.</td>
      <td>inurl:blog</td>
    </tr>
    <tr>
      <td>filetype:</td>
      <td>Encuentra archivos de un tipo específico (por ejemplo, PDF, DOC, XLS).</td>
      <td>filetype:pdf</td>
    </tr>
    <tr>
      <td>ext:</td>
      <td>Encuentra archivos según la extensión</td>
      <td>ext:txt</td>
    </tr>
    <tr>
      <td>site:</td>
      <td>Restringe la búsqueda a un sitio web específico.</td>
      <td>site:wikipedia.org</td>
    </tr>
    <tr>
      <td>cache:</td>
      <td>Muestra la versión en caché de una URL específica.</td>
      <td>cache:https://example.com</td>
    </tr>
    <tr>
      <td>link:</td>
      <td>Encuentra páginas que enlazan con la URL especificada.</td>
      <td>link:https://example.com</td>
    </tr>
    <tr>
      <td>related:</td>
      <td>Muestra páginas web similares a la URL especificada.</td>
      <td>related:https://example.com</td>
    </tr>
    <tr>
      <td>info:</td>
      <td>Proporciona información sobre una URL específica.</td>
      <td>info:https://example.com</td>
    </tr>
    <tr>
      <td>define:</td>
      <td>Muestra definiciones de términos específicos.</td>
      <td>define:ciberseguridad</td>
    </tr>
    <tr>
      <td>allintitle:</td>
      <td>Encuentra páginas que contienen todos los términos específicos en su título.</td>
      <td>allintitle:ciberseguridad hacking</td>
    </tr>
    <tr>
      <td>allinurl:</td>
      <td>Encuentra páginas con una URL que contiene todos los términos específicos.</td>
      <td>allinurl:cybersecurity news</td>
    </tr>
    <tr>
      <td>inanchor:</td>
      <td>Encuentra páginas con anclajes (textos de hipervínculo) que contienen términos específicos.</td>
      <td>inanchor:”computer security”</td>
    </tr>
    <tr>
      <td>intext:</td>
      <td>Encuentra páginas que contienen un término específico en su contenido.</td>
      <td>intext:”security best practices”</td>
    </tr>
    <tr>
      <td>daterange:</td>
      <td>Devuelve resultados en un rango de tiempo específico</td>
      <td>daterange:2023-2024</td>
    </tr>
    <tr>
      <td>size:</td>
      <td>Encuentra archivos de un tamaño específico en bytes.</td>
      <td>size:1000000</td>
    </tr>
  </tbody>
</table>

<p>Un ejemplo de dork para encontrar archivos sensibles:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>inurl:"/etc/passwd"
</code></pre></div></div>

<p>Un dork que escandalizaría a cualquiera (literalmente encontré más documentos de empleados de dependencias de gobierno mexicanas.)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>intext:'.pw' | '*.pass' | '*.passwd' | '*.password' | '*.pwpass' | '*.pwd' | '*.passphrase' | '*.secret' | '*.key' | '*.credential' | '*.token' | '*.msk' | '*.crypt' | '*.hash' | '*.db' | '*.dat' | '*.wallet'
</code></pre></div></div>

<h2 id="otros-usos">Otros usos</h2>

<p>Además de la ciberseguridad, los dorks son de ayuda en muchos otros ámbitos, como los siguientes:</p>

<ul>
  <li>
    <p>Investigación académica: Los dorks pueden utilizarse para buscar información específica en línea relacionada con la investigación académica, como artículos científicos, documentos técnicos, y otros recursos educativos. Considero este el más importante de todos, ya que la investifación es una precursora de resolución a necesidades humanas, tantas como sea posible imaginar</p>
  </li>
  <li>
    <p>Recopilación de datos: Nos pueden ser útiles para recopilar datos y estadísticas sobre temas específicos, como opiniones de usuarios sobre productos, tendencias de mercado, o información demográfica.</p>
  </li>
  <li>
    <p>Búsqueda de empleo: También pueden ser útiles para buscar oportunidades de empleo en línea, como listados de trabajos, perfiles de empresas, y recursos de desarrollo profesional, esto es otro uso muy importante.</p>
  </li>
  <li>
    <p>Búsqueda de medios de comunicación social: Los dorks pueden ser utilizados para buscar perfiles de medios de comunicación social, publicaciones relevantes, y conversaciones sobre temas específicos en plataformas como Twitter, Facebook, y LinkedIn.</p>
  </li>
</ul>

<h3 id="fuentes-de-importancia-a-consultar">Fuentes de importancia a consultar:</h3>

<p>-<a href="https://www.exploit-db.com/google-hacking-database">Google Hacking Database</a></p>

<p>-<a href="https://ahrefs.com/blog/google-advanced-search-operators/">Advanced Search Operators</a></p>]]></content><author><name>Lorne</name><email>Pentesting@ciencias.unam.mx</email></author><category term="ciberseguridad" /><category term="google hacking" /><category term="busquedas avanzadas" /><summary type="html"><![CDATA[Como usuarios de la tecnología y, aún más importante, como defensores de la seguridad de la información, es fundamental estar familiarizados con las herramientas disponibles para acceder a información oficial y proveniente de fuentes confiables. Además, se recomienda encarecidamente tener conocimientos sobre búsquedas avanzadas para evitar la necesidad de revisar cada título de página en busca de la información deseada después de realizar una búsqueda en un motor de búsqueda.]]></summary></entry><entry><title type="html">Cybersecurity Week 2023 - Writeup</title><link href="http://localhost:4000/posts/writeup/" rel="alternate" type="text/html" title="Cybersecurity Week 2023 - Writeup" /><published>2023-12-06T00:00:00-06:00</published><updated>2023-12-06T00:00:00-06:00</updated><id>http://localhost:4000/posts/writeup</id><content type="html" xml:base="http://localhost:4000/posts/writeup/"><![CDATA[<h1 id="writeup-cybersecurity-week-2023---pumahat">Writeup Cybersecurity week 2023  ~ Pumahat</h1>

<h6 id="nota-este-artículo-podría-no-contener-todos-los-retos-del-ctf-debido-a-que-no-pude-documentarlos-y-de-algunos-no-tengo-capturas-de-pantalla-sin-embargo-espero-que-sea-de-utilidad-para-el-lector"><strong>Nota:</strong> <em>Este artículo podría no contener todos los retos del CTF, debido a que no pude documentarlos y de algunos no tengo capturas de pantalla, sin embargo, espero que sea de utilidad para el lector</em></h6>

<ul>
  <li><a href="#cultura-general">Cultura general</a></li>
  <li><a href="#análisis-de-red">Análisis de red</a></li>
  <li><a href="#criptografía">Criptografía</a></li>
  <li><a href="#network">Network</a></li>
  <li><a href="#pentesting-web">Pentesting web</a></li>
  <li><a href="#miscelaneo">Miscelaneo</a></li>
  <li><a href="#osint">OSINT</a></li>
</ul>

<hr />

<h2 id="cultura-general">Cultura general</h2>

<h4 id="whoami">whoami</h4>

<p><img src="/assets/images/CTF/general/whoami.jpg" alt="Who Am I" width="60%" /></p>

<p>¿Quién es? <strong>Respuesta: Kevin Mitnick</strong></p>

<p>En caso de no saber quién es, se puede buscar la imagen y se obtiene la respuesta.</p>

<h4 id="silbato-de-captain-crunch">Silbato de Captain Crunch</h4>

<p><img src="/assets/images/CTF/general/silbato.jpg" alt="Silbato" width="60%" /></p>

<p>Esta imagen hace referencia al hackeo de sistemas telefónicos con el sonido que hacía este silbato, inventado por <strong>John Draper</strong>, en caso de no saber también se puede buscar con las palabras clave: “captain crunch whistle hack” y se encuentra el contexto.</p>

<h4 id="iphone-break">Iphone break</h4>

<p><img src="/assets/images/CTF/general/iphone.png" alt="iphone" width="50%" /></p>

<p>La imagen anterior es sobre la historia del jailbreak del Iphone, realizada por <strong>George Hotz</strong> a los 17 años.</p>

<hr />

<h2 id="análisis-de-red">Análisis de red</h2>

<h4 id="autenticación-insegura">Autenticación insegura</h4>

<p>Este reto nos pedía encontrar una bandera en un archivo pcap, para ello se utilizó la herramienta <code class="language-plaintext highlighter-rouge">wireshark</code> para analizar el archivo, al analizarlo podemos ver que hay paquetes de tipo <code class="language-plaintext highlighter-rouge">http</code> con método <code class="language-plaintext highlighter-rouge">GET</code> así que revisando con cuidado la información de estos, se encontró la flag en texto plano.</p>

<p><img src="/assets/images/CTF/wp/network1.png" alt="wireshark" /></p>

<h4 id="recuperando-imágenes">Recuperando imágenes</h4>

<p>Para este reto teníamos una pista sobre un archivo imagen en el segmento de paquetes pcap, así que igualmente usando <code class="language-plaintext highlighter-rouge">wireshark</code>, observando los paquetes, notamos que hubo un ingreso por <code class="language-plaintext highlighter-rouge">ftp</code>` y obtención de un archivo imagen, así que, filtrando los objetos de tipo data-ftp, pudimos obtener la imagen, y sólo bastaba con descargarla y obtener la flag.</p>

<p><img src="/assets/images/CTF/wp/wireshark2.png" alt="wireshark" /></p>

<p>y simplemente era visualizar la imagen y obtener la flag.</p>

<p><img src="/assets/images/CTF/wp/2.png" alt="get image" /></p>

<hr />

<h2 id="criptografía">Criptografía</h2>

<p><img src="/assets/images/CTF/wp/crypto/challenge.png" alt="Crypto Challenge" /></p>

<p>Esta imagen del emperador romano Cesar, hace alusión al cifrado cesar, que mueve n posiciones el alfabeto, en este caso se mueve 20 posiciones, así que usando herramientas online como CyberChef se puede obtener la respuesta.</p>

<p><img src="/assets/images/CTF/wp/crypto/cesar.png" alt="Cyberchef" /></p>

<hr />

<h2 id="network">Network</h2>

<h4 id="crackeando-ssh">Crackeando ssh</h4>

<p>Este desafío nos pedía crackear una contraseña de <code class="language-plaintext highlighter-rouge">ssh</code> para obtener la contraseña, sin embargo nos pedía explícitamente no utilizar fuerza bruta, así que, la segunda opción que no involucra activamente a la máquina objetivo, eran herramientas online como <code class="language-plaintext highlighter-rouge">crackstation</code> que es un diccionario de contraseñas, así que se utilizó esta herramienta para obtener la contraseña.</p>

<p><img src="/assets/images/CTF/wp/ssh_network.png" alt="ssh" /></p>

<p>una vez crackeada, simplemente era cuestión de entrar a la máquina con la contraseña obtenida y obtener la flag.</p>

<hr />

<h2 id="pentesting-web">Pentesting web</h2>

<h4 id="ssrf-server-side-request-forgery">SSRF (Server Side Request Forgery)</h4>

<p><img src="/assets/images/CTF/wp/ssrf.png" alt="SSRF" /></p>

<p>La página que se nos da para atacar, tiene un enlace para la página llamada “flag.php” sin embargo al acceder nos dice que no tenemos permiso para leer, así que lo primero que se hizo después de ver el código fuente es ver el formato de URL, y notamos que tiene un <strong>Server Side Request Forgery</strong>, por el formato de la URL:</p>

<p><code class="language-plaintext highlighter-rouge">https://pumahat.unam.mx:23350/index.php?content=index.php</code></p>

<p>por lo que en lugar de visitar directamente flag.php, se intentó hacerlo mediante el parámetro content, al hacerlo tampoco mostraba nada, pero viendo nuevamente el código fuente podemos leer el contenido de la página, y ahí se encuentra la flag.</p>

<p><img src="/assets/images/CTF/wp/ssrf2.png" alt="SSRF" /></p>

<h4 id="webshell">Webshell</h4>

<p>No tengo suficientes capturas de pantalla sobre este reto, pero consistía en revisar la página robots.txt, que normalmente es un archivo que incluye direcciones que no se deben visitar, entre ellas alguna que contenga la flag.</p>

<p><img src="/assets/images/CTF/wp/robots.jpg" alt="robots" /></p>

<p>La dirección contenía una api que comunicaba con la máquina, pero no tenía los suficientes filtros para evitar inputs no deseados, lo que fácilmente lo convirtió en un <code class="language-plaintext highlighter-rouge">RCE</code> la máquina ejecutaba un comando específico, pero podía fácilmente tener un bypass haciendo una injección de comandos como:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;comando&gt;; cat /home/user/flag.txt
</code></pre></div></div>
<p>(Normalmente se haría una búsqueda del archivo, pero el comando anterior era el más cercano al final del comando que se ejecutaba para leer la flag)</p>

<hr />

<h2 id="miscelaneo">Miscelaneo</h2>

<h4 id="git">Git</h4>

<p>En un reto nos pedían encontrar la flag en un git, por lo que este es un problema clásico de commits inseguros, así que lo que se hizo fué verificar los logs del git, y se encontró la flag en un commit.</p>

<p><img src="/assets/images/CTF/wp/git/history.png" alt="git log" /></p>

<p>Al revisar el historal de commits, generalmente en los primeros, encontramos malas prácticas como subir contraseñas, o en este caso la flag.</p>

<p>Paso a paso:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require: tener el git ya clonado
1. git log -&gt; Muestra el historial de versiones de un git
2. git checkout &lt;commit&gt; -&gt; Cambia el estado del git al commit que se le indique
3. realizar una revisión de los documentos del git, en este caso se encontró la flag en el archivo **index.html**
</code></pre></div></div>

<p>al haber realizado estos sencillos comandos, pudimos obtener el código fuente de la página y encontrar la flag.</p>

<p><img src="/assets/images/CTF/wp/git/flag.png" alt="flag" /></p>

<h4 id="fe0">¿fe0?</h4>

<p>este reto nos da una pista del reto, ya que hace alusión a la firma de los archivos de tipo imagen jpeg, sin embargo era una cadena muy larga sin aparente sentido, utilizando herramientas como <strong>cyberchef</strong> me di cuenta que era texto en formato <code class="language-plaintext highlighter-rouge">base64</code> así que una vez decodificado, notamos que es un archivo <code class="language-plaintext highlighter-rouge">jpeg</code> y abriendo el archivo con un visor de imágenes, en mi caso fué con <code class="language-plaintext highlighter-rouge">feh</code> se puede ver la flag.</p>

<p><img src="/assets/images/CTF/wp/Fe0.png" alt="fe0" width="60%" /></p>

<h4 id="red-flag">Red Flag</h4>

<p>Este problema también es trivial, nos dan una imagen con una bandera roja, aparentemente normal, pero podemos inferir que tiene información dentro (Esteganografía), así que se utilizó la herramienta <code class="language-plaintext highlighter-rouge">steghide</code> para extraer la información de la imagen, y se obtuvo la flag.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>steghide extract -sf redflag.jpg
</code></pre></div></div>

<p><img src="/assets/images/CTF/wp/stego.png" alt="stego" /></p>

<h4 id="crackzip">Crackzip</h4>

<p>Para esta prueba nos dan un archivo zip, que al descomprimirlo nos pide una contraseña, lo primero que vino a mi mente y es de las herramientas más populares, fue el buen <code class="language-plaintext highlighter-rouge">john</code> para crackear la contraseña del archivo, esto consiste en convertir el archivo zip a un formato que pueda ser leído por <code class="language-plaintext highlighter-rouge">john</code> usando <code class="language-plaintext highlighter-rouge">zip2john</code>, y posteriormente crackearlo.</p>

<p>para ello basta con ejecutar los siguientes comandos:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zip2john challenge.zip &gt; secret.hash
</code></pre></div></div>
<p>para escribir el hash en un archivo llamado secret.hash, y posteriormente crackearlo con john, usando algún diccionario de contraseñas, en este caso se utilizó el clásico diccionario <code class="language-plaintext highlighter-rouge">rockyou.txt</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>john --wordlist=/usr/share/wordlists/rockyou.txt secret.hash
</code></pre></div></div>
<p><img src="/assets/images/CTF/wp/crackzip.png" alt="crackzip" /></p>

<p>al obtener la contraseña sólo era cuestión de descomprimir el zip y obtener la flag.</p>

<hr />

<h1 id="osint">OSINT</h1>

<h4 id="metadata">Metadata</h4>

<p>Este reto es muy similar al anterior, nos dan una imagen, sin embargo no contiene nada dentro, pero al revisar los metadatos de la imagen, se encuentra la flag, para esto se utilizó la herramienta <code class="language-plaintext highlighter-rouge">exiftool</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exiftool metadata.jpg
</code></pre></div></div>

<p><img src="/assets/images/CTF/wp/metadata.png" alt="meta" /></p>

<p>Finalmente quiero agradecer al equipo de PumaHat por la excelente organización del evento, así como a las personas que dedicaron tiempo a realizar los retos (incluyendo los de hacking físico) me gustó bastante, también gracias a todos los participantes que hicieron de esto un reto divertido. Espero que este writeup les sea útil, y si tienen alguna pregunta o encuentran alguna imprecisión, no duden en ponerse en contacto conmigo a través de mis redes sociales. ¡Gracias!1</p>

<p>-Lorne</p>]]></content><author><name>Lorne</name><email>Pentesting@ciencias.unam.mx</email></author><category term="pumahat" /><category term="ctf" /><category term="ciberseguridad" /><summary type="html"><![CDATA[Writeup Cybersecurity week 2023 ~ Pumahat]]></summary></entry><entry><title type="html">La importancia de .gitignore</title><link href="http://localhost:4000/posts/git-breach/" rel="alternate" type="text/html" title="La importancia de .gitignore" /><published>2023-10-21T00:00:00-06:00</published><updated>2023-10-21T00:00:00-06:00</updated><id>http://localhost:4000/posts/git-breach</id><content type="html" xml:base="http://localhost:4000/posts/git-breach/"><![CDATA[<h4 id="contenido">Contenido</h4>
<ul>
  <li><a href="#qué-es-git">¿Qué es Git?</a></li>
  <li><a href="#qué-es-gitignore">¿Qué es .gitignore?</a></li>
  <li><a href="#es-obligatorio-usar-gitignore">¿Es obligatorio usar .gitignore?</a></li>
  <li><a href="#git-y-la-ciberseguridad">Git y la ciberseguridad</a></li>
  <li><a href="#demostración-práctica">Demostración práctica:</a></li>
  <li><a href="#conclusión">Conclusión</a></li>
  <li><a href="#fuentes">Fuentes</a></li>
</ul>

<p>Como desarrolladores de aplicaciones, es casi un fundamento conocer <code class="language-plaintext highlighter-rouge">git</code>, debido a sus facilidades al momento de trabajar con proyectos colaborativos así como mantener un respaldo de nuestro trabajo. Pero es necesario adoptar buenas prácticas de seguridad si no queremos atraer personas no deseadas.</p>

<h2 id="qué-es-git">¿Qué es Git?</h2>
<p>Git es un sistema de control de versiones distribuido ampliamente utilizado para rastrear cambios en archivos y proyectos de software. Permite a los desarrolladores colaborar, mantener un historial de versiones y trabajar de manera eficiente en proyectos de programación.</p>

<h2 id="qué-es-gitignore">¿Qué es .gitignore?</h2>
<p>Es un archivo especial mediante el cual se ignoran (bastante conveniente con el nombre) los archivos del proyecto local, especialmente los archivos que no queremos compartir aún debido a que pueden contener información sensible como contraseñas o usuarios (Sí, revelar usuarios es peligroso también).</p>

<h2 id="es-obligatorio-usar-gitignore">¿Es obligatorio usar .gitignore?</h2>
<p>No, no existe alguna manera en la que git deje de funcionar si no tenemos un archivo <code class="language-plaintext highlighter-rouge">.gitignore</code> en nuestro repositorio, sin embargo es una buena práctica ya que al usarlo, nos ahorramos tiempo en tener que mover o eliminar archivos que no queramos subir</p>

<h2 id="git-y-la-ciberseguridad">Git y la ciberseguridad</h2>
<p>Cuando creamos proyectos, de cualquier tipo, si usamos git, debemos tener muy presente que si en algún momento subimos algo que no queremos, aunque eliminemos el commit, este aún podrá ser visto, puesto que en realidad no se está eliminando, sino que simplemente se elimina la referencia a dicho commit.</p>

<p>Debido a que existen muchas formas de recuperar dicha información, cuando estamos buscando vulnerabilidades en una aplicación y descubrimos que se desarrolla en un git, y mejor aún, en algún git público, en una buena parte de los casos, la enumeración y reconocimiento activo resulta en información valiosa que nos permita manipular la aplicación y obtener el deseado acceso privilegiado.</p>

<h2 id="demostración-práctica">Demostración práctica:</h2>

<p>Para comprobar que lo que se dice es cierto y respaldar este artículo, mostraré una demostración práctica de cómo obtener información sensible de un repositorio git (aunque este sea privado).</p>

<blockquote>
  <p>Voy a saltarme varias etapas de enumeración y reconocimiento activo, ya que no es el objetivo de este artículo, pero si quieres aprender más, proximamente estaré publicando un artículo sobre esto.</p>
</blockquote>

<p><img src="/assets/images/git-breach/login.jpg" alt="Login genérico" />
En esta imagen podemos apreciar un login genérico que representa una aplicación web (podemos suponer que es el login del administrador).</p>

<p><img src="/assets/images/git-breach/git.jpg" alt="Directorio interesante..." />
En esta imagen podemos apreciar un directorio llamado <code class="language-plaintext highlighter-rouge">.git</code> que nos indica que el proyecto está siendo versionado con git. aparentemente los archivos no son relevantes, pero si nos ponemos creativos, y de alguna manera logramos conseguir el directorio <code class="language-plaintext highlighter-rouge">.git</code> de un repositorio, podemos obtener información valiosa sobre el funcionamiento de nuestro objetivo.</p>

<p><img src="/assets/images/git-breach/dump.jpg" alt=".git en nuestras manos" />
De alguna manera logramos descargar todo el contenido de nuestra aplicación vulnerable, y ahora tenemos el directorio <code class="language-plaintext highlighter-rouge">.git</code> en nuestras manos. ¿Ahora qué?</p>

<p><img src="/assets/images/git-breach/git-enum.jpg" alt=".git en nuestras manos" />
Con una enumeración simple podemos obtener el registro de los archivos valiosos que están o pudieron estar en nuestro repositorio objetivo, generalmente se encuentra en los primeros commits, cuando la aplicación está tan fresca que no se ha considerado el tema de la seguridad. Podemos ver archivos que se encontraron en el git y ya no están, así como la lista de commits que se han hecho.</p>

<p><img src="/assets/images/git-breach/interesting.jpg" alt=".git en nuestras manos" />
En los comentarios de los commit se encuentran descripciones útiles para un atacante, en este caso sabemos que hace unos commits la aplicación tenía estándares de seguridad insuficientes. Vamos a aprovechar eso y (Sin tener acceso al git original ya que es privado) obtendremos los archivos que se encontraban en ese commit.</p>

<p><img src="/assets/images/git-breach/recover.jpg" alt=".git en nuestras manos" /></p>
<blockquote>
  <p>¿Qué es esto? ¿Cómo obtuvimos los archivos de un git privado?
La respuesta es simple, abusando del mecanismo de git, que nos permite recuperar archivos que se encontraban en un commit anterior, y como ya sabemos, el commit que nos interesa es el que tiene la información sensible.</p>
</blockquote>

<p>Ahora sólo nos queda husmear entre los archivos, para fines prácticos el código vulnerable es el siguiente:</p>

<p><img src="/assets/images/git-breach/juice.jpg" alt=".git en nuestras manos" />
Podemos apreciar credenciales de accesso del usuario <code class="language-plaintext highlighter-rouge">admin</code>, las cuales permitirían a un atacante, obtener acceso privilegiado a la aplicación. Y en pocas palabras, hacer lo que quiera con ella.</p>

<h2 id="conclusión">Conclusión</h2>
<p>Este tipo de vulnerabilidades son más comunes de lo que se piensa, y es por eso que deben aprovecharse los mecanismos para exponer información sensible, ya que en muchas ocasiones, la información que se encuentra en un git, es más valiosa que la propia aplicación.
En nuestro caso de prueba, pudieron hacerse muchas cosas para <strong>evitar este problema</strong>, por ejemplo:</p>
<ul>
  <li>no subir ni por accidente el archivo de prueba que contiene credenciales.</li>
  <li>escribir código seguro desde el inicio.</li>
  <li>usar <code class="language-plaintext highlighter-rouge">.gitignore</code> para evitar subir archivos que no queremos.</li>
  <li>no exponer el <code class="language-plaintext highlighter-rouge">.git</code> de la aplicación.</li>
</ul>

<h2 id="fuentes">Fuentes</h2>

<ul>
  <li><a href="https://www.atlassian.com/es/git/tutorials/saving-changes/gitignore" target="_blank">https://www.atlassian.com/es/git/tutorials/saving-changes/gitignore</a></li>
  <li>La prueba práctica se ha obtenido de <a href="https://tryhackme.com/signup?referrer=5ef55c3344692953ccc58b16" target="_blank">Tryhackme - Git Happens</a></li>
</ul>]]></content><author><name>Lorne</name><email>Pentesting@ciencias.unam.mx</email></author><category term="git" /><category term="ciberseguridad" /><category term="data exposure" /><summary type="html"><![CDATA[Contenido ¿Qué es Git? ¿Qué es .gitignore? ¿Es obligatorio usar .gitignore? Git y la ciberseguridad Demostración práctica: Conclusión Fuentes]]></summary></entry><entry><title type="html">Pivoting: De la Exploración a la Explotación</title><link href="http://localhost:4000/posts/pivoting/" rel="alternate" type="text/html" title="Pivoting: De la Exploración a la Explotación" /><published>2023-05-10T00:00:00-06:00</published><updated>2023-05-10T00:00:00-06:00</updated><id>http://localhost:4000/posts/pivoting</id><content type="html" xml:base="http://localhost:4000/posts/pivoting/"><![CDATA[<p>lorem ipsum</p>]]></content><author><name>Lorne</name><email>Pentesting@ciencias.unam.mx</email></author><category term="técnicas" /><category term="redes" /><summary type="html"><![CDATA[lorem ipsum]]></summary></entry></feed>